{"version":3,"sources":["ShowingWeather.js","App.js","serviceWorker.js","index.js"],"names":["ShowingWeather","latitude","longitude","useState","api","setApi","temp","setTemp","temp_max","setTemp_max","temp_min","setTemp_min","feels_like","setFeels_like","scale","setScale","useEffect","fetchData","fetch","then","response","json","resJson","console","log","main","catch","err","handleClick","toFixed","sys","country","name","src","weather","icon","alt","height","width","onClick","App","geolocation","useGeolocation","setLatitude","setLongitude","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kQAuEeA,EArEQ,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UAAgB,EAC5BC,mBAAS,IADmB,mBAC3CC,EAD2C,KACtCC,EADsC,OAE1BF,mBAAS,IAFiB,mBAE3CG,EAF2C,KAErCC,EAFqC,OAGlBJ,mBAAS,IAHS,mBAG3CK,EAH2C,KAGjCC,EAHiC,OAIlBN,mBAAS,IAJS,mBAI3CO,EAJ2C,KAIjCC,EAJiC,OAKdR,mBAAS,IALK,mBAK3CS,EAL2C,KAK/BC,EAL+B,OAMxBV,mBAAS,WANe,mBAM3CW,EAN2C,KAMpCC,EANoC,KAQlDC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAY,WAChBC,MAAM,qDAAD,OAAsDjB,EAAtD,gBAAsEC,IAC1EiB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACLC,QAAQC,IAAIF,EAAS,WACrBjB,EAAOiB,GACPf,EAAQe,EAAQG,KAAKnB,MACrBG,EAAYa,EAAQG,KAAKjB,UACzBG,EAAYW,EAAQG,KAAKf,UACzBG,EAAcS,EAAQG,KAAKb,eAE5Bc,OAAM,SAAAC,GACLJ,QAAQC,IAAIG,OAIVC,EAAc,WACJ,YAAVd,GACFP,GAAgB,IAAPD,EAAa,IAAIuB,QAAQ,IAClCpB,GAAwB,IAAXD,EAAiB,IAAIqB,QAAQ,IAC1ClB,GAAwB,IAAXD,EAAiB,IAAImB,QAAQ,IAC1ChB,GAA4B,IAAbD,EAAmB,IAAIiB,QAAQ,IAC9Cd,EAAS,gBAETR,IAAUD,EAAK,IAAI,KAAKuB,QAAQ,IAChCpB,IAAcD,EAAS,IAAI,KAAKqB,QAAQ,IACxClB,IAAcD,EAAS,IAAI,KAAKmB,QAAQ,IACxChB,IAAgBD,EAAW,IAAI,KAAKiB,QAAQ,IAC5Cd,EAAS,aAIb,OACE,6BAEIX,EAAIqB,KACJ,6BACE,2BAAIrB,EAAI0B,IAAIC,QAAZ,KAAuB3B,EAAI4B,KAA3B,iHACA,yBAAKC,IAAK7B,EAAI8B,QAAQ,GAAGC,KAAMC,IAAI,mFAAkBC,OAAO,MAAMC,MAAM,QACxE,2BAAIhC,EAAJ,6EACA,2BAAIE,EAAJ,2GACA,2BAAIE,EAAJ,2GACA,2BAAIE,EAAJ,2DAEY,YAAVE,EACA,4BAAQyB,QAASX,GAAjB,gGAEA,4BAAQW,QAASX,GAAjB,2FAIJ,wN,OChCOY,G,MA5BH,WAEV,IAAMC,EAAcC,cAFJ,EAGgBvC,mBAAS,GAHzB,mBAGTF,EAHS,KAGC0C,EAHD,OAIkBxC,mBAAS,GAJ3B,mBAITD,EAJS,KAIE0C,EAJF,KAchB,OARA5B,qBAAU,WACR2B,EAAYF,EAAYxC,YACxB,CAACwC,IAEHzB,qBAAU,WACR4B,EAAaH,EAAYvC,aACzB,CAACuC,IAGD,yBAAKI,UAAU,OACb,iFACA,oKAEE5C,EACA,kBAAC,EAAD,CAAgBA,SAAUA,EAAUC,UAAWA,IAE/C,uNCfY4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.ecead4d1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ShowingWeather = ({ latitude, longitude }) => {\r\n  const [api, setApi] = useState('');\r\n  const [temp, setTemp] = useState('');\r\n  const [temp_max, setTemp_max] = useState('');\r\n  const [temp_min, setTemp_min] = useState('');\r\n  const [feels_like, setFeels_like] = useState('');\r\n  const [scale, setScale] = useState('Celsius');\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, [])\r\n\r\n  const fetchData = () => {\r\n    fetch(`https://fcc-weather-api.glitch.me/api/current?lat=${latitude}&lon=${longitude}`)\r\n    .then(response => response.json())\r\n    .then((resJson) =>{\r\n      console.log(resJson, 'resJson')  \r\n      setApi(resJson)\r\n      setTemp(resJson.main.temp)\r\n      setTemp_max(resJson.main.temp_max)\r\n      setTemp_min(resJson.main.temp_min)\r\n      setFeels_like(resJson.main.feels_like)\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n    })\r\n  }\r\n\r\n  const handleClick = () => {\r\n    if (scale === 'Celsius') {\r\n      setTemp((temp * 1.8 + 32).toFixed(2))\r\n      setTemp_max((temp_max * 1.8 + 32).toFixed(2))\r\n      setTemp_min((temp_min * 1.8 + 32).toFixed(2))\r\n      setFeels_like((feels_like * 1.8 + 32).toFixed(2))\r\n      setScale('Fahrenheit')\r\n    } else {\r\n      setTemp(((temp-32)/1.8).toFixed(2))\r\n      setTemp_max(((temp_max-32)/1.8).toFixed(2))\r\n      setTemp_min(((temp_min-32)/1.8).toFixed(2))\r\n      setFeels_like(((feels_like-32)/1.8).toFixed(2))\r\n      setScale('Celsius')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        api.main ? \r\n        <div>\r\n          <p>{api.sys.country}, {api.name}  :אנו מזהים שאתה נמצא ב</p>\r\n          <img src={api.weather[0].icon} alt=\"איקון מזג אוויר\" height=\"150\" width=\"150\" />\r\n          <p>{temp}&#186; :טמפרטורה כעת</p>\r\n          <p>{temp_max}&#186; :טמפרטורה מקסימלית</p>\r\n          <p>{temp_min}&#186; :טמפרטורה מינימלית</p>\r\n          <p>{feels_like}&#186; :מרגיש כמו</p>\r\n          {\r\n            scale === 'Celsius' ?\r\n            <button onClick={handleClick} >אני רוצה בפרנהייט</button>\r\n            :\r\n            <button onClick={handleClick} >אני רוצה בצלזיוס</button>\r\n          }\r\n        </div>\r\n        : \r\n        <p>...המתן בסבלנות, אנו מעבדים את הנתונים</p> \r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShowingWeather","import React, { useState, useEffect } from 'react';\nimport ShowingWeather from './ShowingWeather'\nimport useGeolocation from 'react-hook-geolocation';\nimport './App.css';\n\nconst App = () => {\n\n  const geolocation = useGeolocation()\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n\n  useEffect(() => {\n    setLatitude(geolocation.latitude)\n  },[geolocation])\n\n  useEffect(() => {\n    setLongitude(geolocation.longitude)\n  },[geolocation])\n\n  return (\n    <div className=\"App\">\n      <h1>מזג אוויר</h1>\n      <h3>!לדעת מה מזג האוויר ברגע זה</h3>\n      { \n        latitude ?\n        <ShowingWeather latitude={latitude} longitude={longitude} /> \n        :\n        <p>.המתן בסבלנות, אנו מעבדים את הנתונים</p> \n      }\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}